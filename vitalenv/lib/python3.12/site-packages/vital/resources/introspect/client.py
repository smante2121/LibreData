# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError
from ...types.providers import Providers
from ...types.user_historical_pulls_response import UserHistoricalPullsResponse
from ...types.user_resources_response import UserResourcesResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class IntrospectClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_user_resources(
        self,
        *,
        user_id: typing.Optional[str] = None,
        provider: typing.Optional[Providers] = None,
        user_limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        next_cursor: typing.Optional[str] = None,
    ) -> UserResourcesResponse:
        """
        Parameters:
            - user_id: typing.Optional[str].

            - provider: typing.Optional[Providers].

            - user_limit: typing.Optional[int].

            - cursor: typing.Optional[str].

            - next_cursor: typing.Optional[str]. The cursor for fetching the next page, or `null` to fetch the first page.
        ---
        from vital.client import Vital

        client = Vital(
            api_key="YOUR_API_KEY",
        )
        client.introspect.get_user_resources()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/introspect/resources"),
            params=remove_none_from_dict(
                {
                    "user_id": user_id,
                    "provider": provider,
                    "user_limit": user_limit,
                    "cursor": cursor,
                    "next_cursor": next_cursor,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserResourcesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_user_historical_pulls(
        self,
        *,
        user_id: typing.Optional[str] = None,
        provider: typing.Optional[Providers] = None,
        user_limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        next_cursor: typing.Optional[str] = None,
    ) -> UserHistoricalPullsResponse:
        """
        Parameters:
            - user_id: typing.Optional[str].

            - provider: typing.Optional[Providers].

            - user_limit: typing.Optional[int].

            - cursor: typing.Optional[str].

            - next_cursor: typing.Optional[str]. The cursor for fetching the next page, or `null` to fetch the first page.
        ---
        from vital.client import Vital

        client = Vital(
            api_key="YOUR_API_KEY",
        )
        client.introspect.get_user_historical_pulls()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/introspect/historical_pull"),
            params=remove_none_from_dict(
                {
                    "user_id": user_id,
                    "provider": provider,
                    "user_limit": user_limit,
                    "cursor": cursor,
                    "next_cursor": next_cursor,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserHistoricalPullsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIntrospectClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_user_resources(
        self,
        *,
        user_id: typing.Optional[str] = None,
        provider: typing.Optional[Providers] = None,
        user_limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        next_cursor: typing.Optional[str] = None,
    ) -> UserResourcesResponse:
        """
        Parameters:
            - user_id: typing.Optional[str].

            - provider: typing.Optional[Providers].

            - user_limit: typing.Optional[int].

            - cursor: typing.Optional[str].

            - next_cursor: typing.Optional[str]. The cursor for fetching the next page, or `null` to fetch the first page.
        ---
        from vital.client import AsyncVital

        client = AsyncVital(
            api_key="YOUR_API_KEY",
        )
        await client.introspect.get_user_resources()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/introspect/resources"),
            params=remove_none_from_dict(
                {
                    "user_id": user_id,
                    "provider": provider,
                    "user_limit": user_limit,
                    "cursor": cursor,
                    "next_cursor": next_cursor,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserResourcesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_user_historical_pulls(
        self,
        *,
        user_id: typing.Optional[str] = None,
        provider: typing.Optional[Providers] = None,
        user_limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        next_cursor: typing.Optional[str] = None,
    ) -> UserHistoricalPullsResponse:
        """
        Parameters:
            - user_id: typing.Optional[str].

            - provider: typing.Optional[Providers].

            - user_limit: typing.Optional[int].

            - cursor: typing.Optional[str].

            - next_cursor: typing.Optional[str]. The cursor for fetching the next page, or `null` to fetch the first page.
        ---
        from vital.client import AsyncVital

        client = AsyncVital(
            api_key="YOUR_API_KEY",
        )
        await client.introspect.get_user_historical_pulls()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v2/introspect/historical_pull"),
            params=remove_none_from_dict(
                {
                    "user_id": user_id,
                    "provider": provider,
                    "user_limit": user_limit,
                    "cursor": cursor,
                    "next_cursor": next_cursor,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserHistoricalPullsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
