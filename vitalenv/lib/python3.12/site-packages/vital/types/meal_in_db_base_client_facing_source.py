# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .client_facing_food import ClientFacingFood
from .client_facing_source import ClientFacingSource
from .energy import Energy
from .macros import Macros
from .micros import Micros

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class MealInDbBaseClientFacingSource(pydantic.BaseModel):
    id: str
    user_id: str
    priority_id: int
    source_id: int
    provider_id: str
    timestamp: dt.datetime
    name: str
    energy: typing.Optional[Energy]
    macros: typing.Optional[Macros]
    micros: typing.Optional[Micros]
    data: typing.Optional[typing.Dict[str, ClientFacingFood]]
    source: ClientFacingSource
    created_at: dt.datetime
    updated_at: dt.datetime

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
